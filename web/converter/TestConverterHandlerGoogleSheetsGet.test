<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>IG Parser</title>
    <link rel="icon" type="image/x-icon" href="/css/favicon.ico">
    <link rel="shortcut icon" type="image/x-icon" href="/css/favicon.ico">
    <link rel="stylesheet" href="/css/default.css">
    
    <script src="/libraries/ace/ace.js" type="text/javascript" charset="utf-8"></script>
</head>

<body>
<script>

    

    function CopyToClipboard(containerid) {
        if (document.selection) {
            let range = document.body.createTextRange();
            range.moveToElementText(document.getElementById(containerid));
            range.select().createTextRange();
            document.execCommand("copy");
        } else if (window.getSelection) {
            let range = document.createRange();
            range.selectNode(document.getElementById(containerid));
            window.getSelection().addRange(range);
            let res = document.execCommand("copy");
            if (res !== true) {
                alert("Text-to-Clipboard copying failed. Please select output manually and copy via keyboard.")
            }
        }
    }

    

    function check(target) {
        let offset = 0
        target.style.height = 'auto';
        target.style.height = target.scrollHeight + offset + 'px';
    }

</script>

<p>&nbsp;</p>
<p>&nbsp;</p>
<h1><a style="text-decoration:none" href="https://github.com/chrfrantz/IG-Parser" target="_blank">IG Parser</a></h1>
<h2>A Parser for Institutional Statements encoded in the <a href="/help/" target="_blank">IG Script Notation</a> of the <a href="https://newinstitutionalgrammar.org" target="_blank">Institutional Grammar 2.0</a></h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div class="form">
    <form method="POST">
        
        <span data-text="This entry field is for optional use. You can paste the original statement here as a reference while encoding it in the &#39;Encoded Statement&#39; field." class="tooltip">Original Statement:</span>
        <textarea id="rawStmt" name="rawStmt" onload="check(this)" onfocusin="check(this)" onkeyup="check(this);saveFormContent()" onpaste="check(this);saveFormContent()">Once policy comes into force, relevant regulators must monitor and enforce compliance.</textarea>
        
        <div class="error" id="validateError"></div>
        
        <button class="button2" type="button" id="buttonValidate" switch="validate" onclick="checkRawStatementContent()">
            Validate 'Original Statement' input (checks for imbalanced parentheses)
            and copy validated content into 'Encoded Statement' field</button></br></br>
        <script>
            

            function checkRawStatementContent() {

                
                let buttonType = document.getElementById("buttonValidate").getAttribute("switch");

                if (buttonType === "overwrite") {
                    

                    
                    let rawContent = document.getElementById("rawStmt").value;
                    
                    let editor = ace.edit("editor");
                    editor.setValue(rawContent);
                    
                    copyEditorContentToTextArea();

                    
                    document.getElementById("buttonValidate").setAttribute("switch", "validate");
                    document.getElementById("buttonValidate").innerText =
                        "Validate 'Original Statement' input (checks for imbalanced parentheses) and " +
                        "copy validated content into 'Encoded Statement' field";
                    
                    let validateError = document.getElementById("validateError");
                    validateError.innerHTML = "";

                } else if (buttonType === "validate") {
                    

                    
                    let rawContent = document.getElementById("rawStmt").value;
                    
                    let leftParCount = (rawContent.match(/\(/g) || []).length;
                    
                    let rightParCount = (rawContent.match(/\)/g) || []).length;
                    
                    if (leftParCount !== rightParCount) {
                        
                        let validateError = document.getElementById("validateError");
                        validateError.innerHTML = "Found imbalanced parentheses in raw input (" +
                            leftParCount + " opening and " + rightParCount + " closing parentheses).\n" +
                            "Please remove or balance parentheses to before encoding the statement.";
                    } else {
                        
                        let validateError = document.getElementById("validateError");
                        validateError.innerHTML = "";
                        
                        let editor = ace.edit("editor");
                        
                        if (editor.getValue().length === 0) {
                            editor.setValue(rawContent);
                            
                        } else if (editor.getValue() !== rawContent) {
                            
                            let validateError = document.getElementById("validateError");
                            validateError.innerHTML = "The 'Original Statement' content is valid, but has not been copied into the 'Encoded Statement' field, " +
                                "since this field already contains content (to prevent accidental overwriting of encoded statement).\<br/\>" +
                                "Confirm if you indeed want to overwrite the 'Encoded Statement' content with the 'Original Statement' content.";

                            
                            document.getElementById("buttonValidate").setAttribute("switch", "overwrite");
                            document.getElementById("buttonValidate").innerText = "Confirm overwriting of 'Encoded Statement' entry with 'Original Statement' entry";

                        } 
                    }
                } 
            }
        </script>
        
        <span data-text="Click to open a separate help page explaining the IG Script syntax (opens new tab)." class="tooltip"><a href="/help/" target="_blank">Encoded Statement: (?)</a></span>
        
        <div id="editor" name="editor" onkeyup="copyEditorContentToTextArea();saveFormContent()" onpaste="copyEditorContentToTextArea();saveFormContent()">Cac{Once E(policy) F(comes into force)} A,p(relevant) A(regulators) D(must) I(monitor [AND] enforce) Bdir(compliance).</div>
        <script>
            let editor = ace.edit("editor");
            editor.session.setMode("ace/mode/text"); 
            
            editor.setOption("showLineNumbers", true); 
            editor.setOption("wrap", true); 
            editor.setOption("showGutter", true); 
            editor.setOption("showPrintMargin", false); 
            editor.setOption("behavioursEnabled", false);
            editor.setOption("cursorStyle", "ace");
            editor.setOption("fontFamily", "monospace"); 
            editor.setOption("fontSize", 16); 
            editor.setOption("minLines", 5); 
            editor.setOption("maxLines", 30); 

            

            function copyEditorContentToTextArea() {
                let ta = document.getElementById("codedStmt");
                
                ta.value = editor.getValue();
            }

            

            

            function saveFormContent() {
                
                let content = editor.getValue();
                localStorage.setItem("codedStmt", content);
                

                
                saveValue("rawStmt");

                
                

                

                
                saveValue("stmtId");

                
                saveCheckbox("igExtended");

                
                saveCheckbox("annotations");

                
                saveCheckbox("includeHeaders");

                
                saveValue("outputType");

                
                saveValue("printOriginalStatement");

                
                saveValue("printIgScript");

                

                
                saveCheckbox("dov");

                
                saveCheckbox("propertyTree");

                
                saveCheckbox("binaryTree");

                
                saveCheckbox("actCondTop");

                
                saveValue("canvasHeight");

                
                saveValue("canvasWidth");

            }

            

            function saveCheckbox(fieldId) {
                let tmpField = document.getElementById(fieldId);
                if(tmpField != null) {
                    localStorage.setItem(fieldId, tmpField.checked);
                    
                }
            }

            

            function saveValue(fieldId) {
                let tmpField = document.getElementById(fieldId);
                if(tmpField != null) {
                    localStorage.setItem(fieldId, tmpField.value);
                    
                }
            }

            

            function loadFormContent() {
                
                if ( false  === false) {
                    
                    if (localStorage.getItem("codedStmt") != null) {
                        
                        let content = localStorage.getItem("codedStmt");
                        editor.setValue(content);
                        
                        copyEditorContentToTextArea();
                        
                    }

                    
                    loadValue("rawStmt")

                }
                

                
                loadValue("stmtId");

                
                loadCheckbox("igExtended");

                
                loadCheckbox("annotations");

                
                loadCheckbox("includeHeaders");

                
                loadValue("outputType");

                
                loadValue("printOriginalStatement");

                
                loadValue("printIgScript");

                

                
                loadCheckbox("dov");

                
                loadCheckbox("propertyTree");

                
                loadCheckbox("binaryTree");

                
                loadCheckbox("actCondTop");

                
                loadValue("canvasHeight");

                
                loadValue("canvasWidth");

            }

            

            function loadValue(fieldId) {
                if(localStorage.getItem(fieldId) != null && document.getElementById(fieldId) != null) {
                    document.getElementById(fieldId).value = localStorage.getItem(fieldId);
                }
            }

            

            function loadCheckbox(fieldId) {
                if(localStorage.getItem(fieldId) != null && document.getElementById(fieldId) != null) {
                    let content = localStorage.getItem(fieldId);
                    if(content === "true") {
                        document.getElementById(fieldId).checked = true;
                        
                    }
                    if(content === "false") {
                        document.getElementById(fieldId).checked = false;
                        
                    }
                    
                }
            }

            

            function resetContent() {
                
                editor.setValue("Cac{Once E(policy) F(comes into force)} A,p(relevant) A(regulators) D(must) I(monitor [AND] enforce) Bdir(compliance).")
                
                copyEditorContentToTextArea();

                
                document.getElementById("rawStmt").value = "Once policy comes into force, relevant regulators must monitor and enforce compliance.";

                
                if(document.getElementById("stmtId") != null) {
                    document.getElementById("stmtId").value = "123";
                }

                
                
                localStorage.setItem("stmtId", "123");
                
                saveFormContent();
            }

            

            function resetCanvas() {

                
                if(document.getElementById("canvasHeight") != null) {
                    document.getElementById("canvasHeight").value =  2000 ;
                }

                
                if(document.getElementById("canvasWidth") != null) {
                    document.getElementById("canvasWidth").value =  4000 ;
                }

                
                saveFormContent();
            }

            
            window.onload = (event) => {
                loadFormContent();

                
                generateUrl("example2", "Example Statement 2 (moderately complex)",
                    "?rawStmt=When%20an%20inspection,%20review,%20or%20investigation%20of%20an%20accredited%20certifying%20agent%20by%20the%20Program%20Manager%20reveals%20any%20non-compliance%20with%20the%20Act%20or%20regulations%20in%20this%20part,%20a%20written%20notification%20of%20non-compliance%20shall%20be%20sent%20to%20the%20certifying%20agent.&codedStmt=Cac%7BWhen%20A(Program%20Manager)%20I[act=detect%20non-compliance](reveals)%20Bdir%7BA,p(accredited)%20A(certifying%20agent)%20I[act=non-compliant]([is%20not%20in%20compliance])%20with%20the%20Bdir(Act%20[OR]%20regulations%20in%20this%20part)%20Cac%7BWhen%20A(Program%20Manager)%20I[act=monitors](([inspects]%20[OR]%20[reviews])%20[OR]%20[investigates])%20Bdir,p(accredited)%20Bdir(certifying%20agent)%7D%7D%7D%20A([Program%20Manager])%20D(shall)%20I[act=sanction]([send])%20Bdir(notification)%20Bdir,p(of%20non-compliance)%20to%20the%20Bind,p(accredited)%20Bind(certifying%20agent).")
                generateUrl("example3", "Example Statement 3 (complex)",
                    "?rawStmt=Regional%20Managers,%20on%20behalf%20of%20the%20Secretary,%20may%20review,%20and%20reward%20or%20sanction,%20approved%20certified%20production%20and%20handling%20operations%20and%20accredited%20certifying%20agents%20for%20compliance%20with%20the%20Act%20or%20regulations%20in%20this%20part,%20under%20the%20condition%20that%20Operations%20were%20non-compliant%20or%20violated%20organic%20farming%20provisions%20and%20Manager%20has%20concluded%20investigation.&codedStmt=A,p(Regional)%20A[role=enforcer,type=animate](Managers),%20Cex(on%20behalf%20of%20the%20Secretary),%20D[stringency=permissive](may)%20I[act=performance](review%20[AND]%20(reward%20[XOR]%20sanction))%20Bdir,p(approved)%20Bdir1,p(certified)%20Bdir1[role=monitored,type=animate](production%20[operations])%20and%20Bdir[role=monitored,type=animate](handling%20operations)%20and%20Bdir2,p(accredited)%20Bdir2[role=monitor,type=animate](certifying%20agents)%20Cex[ctx=purpose](for%20compliance%20with%20the%20(Act%20[XOR]%20regulations%20in%20this%20part))%20under%20the%20condition%20that%20Cac%7BCac[state]%7BA[role=monitored,type=animate](Operations)%20I[act=violate](were%20non-compliant%20[OR]%20violated)%20Bdir[type=inanimate](organic%20farming%20provisions)%7D%20[AND]%20Cac[state]%7BA[role=enforcer,type=animate](Manager)%20I[act=terminate](has%20concluded)%20Bdir[type=activity](investigation)%7D%7D.");
            };

            
            function generateUrl(exampleId, linkText, linkParameter) {
                let link = document.getElementById(exampleId);
                link.textContent = linkText;
                link.href = window.location.pathname + linkParameter;
            }

        </script>

        
        <textarea id="codedStmt" name="codedStmt" onfocusin="check(this)" onkeyup="check(this)" style="display:none;">Cac{Once E(policy) F(comes into force)} A,p(relevant) A(regulators) D(must) I(monitor [AND] enforce) Bdir(compliance).</textarea><br />
        
        <span data-text="Resets the 'Original Statement' and 'Encoded Statement' fields to the original example content. Note that this will overwrite the current content (e.g., statements you coded)." class="tooltip"><a id="example1" href="#" onclick="resetContent()">Reset to default statement example</a></span>
        &nbsp;&nbsp;&nbsp;<span data-text="Switches to a moderately complex example statement showcasing advanced component-level nesting, component combinations and semantic annotations." class="tooltip"><a id="example2" href="#">Example Statement 2 (moderately complex)</a></span>
        &nbsp;&nbsp;&nbsp;<span data-text="Switches to a complex example statement showcasing combinations of nested activation conditions in addition to the features showcased in the second example." class="tooltip"><a id="example3" href="#">Example Statement 3 (complex)</a></span><br /><br />



<span data-text=""><a href="/visual/" onclick="saveFormContent()">Switch to visual version of IG Parser</a></span><br /><br />
<span data-text=""><a href="/production/" onclick="saveFormContent()">Switch to production version of IG Parser</a></span><br /><br />


<span data-text="This entry field should contain a statement ID (consisting of numbers and/or letters) that is the basis for generating substatement IDs." class="tooltip">Statement ID:</span>
<input id="stmtId" name="stmtId" onkeyup="saveFormContent()" type="text" value="123"><br />


<span data-text="This section includes specific customizations for the output generation, which affect the generated output. Where larger numbers of statements are encoded for analytical purposes, ensure the consistent parameterization for all generated statements." class="tooltip">Parameters:</span>


<input id="igExtended" name="igExtended" type="checkbox" unchecked /><label for="igExtended">Produce IG Extended output (component-level nesting) (default: off)</label>
<input id="annotations" name="annotations" type="checkbox" unchecked /><label for="annotations">Include IG Logico annotations in output (default: off)</label>
<input id="includeHeaders" name="includeHeaders" type="checkbox" checked /><label for="includeHeaders">Include header row in output (default: on)</label>
<span data-text="Indicates whether the Original Statement is included in the output by introducing an additional column following the Statement ID. Choices include the exclusion (no additional column), the inclusion for the first atomic statement only (i.e., first row following the header row), or the inclusion for all atomic statements (i.e., each row)." class="tooltip">Inclusion of Original Statement in generated output:</span>
<select id="printOriginalStatement" name="printOriginalStatement" type="select">
    
    <option value="No inclusion of Original Statement in output (i.e., no additional column)" selected="selected">No inclusion of Original Statement in output (i.e., no additional column)</option>
    
    <option value="Include Original Statement for first atomic statement only (i.e., in first row following optional header row)" >Include Original Statement for first atomic statement only (i.e., in first row following optional header row)</option>
    
    <option value="Include Original Statement for each atomic statement (i.e., in each row)" >Include Original Statement for each atomic statement (i.e., in each row)</option>
    
</select>
<span data-text="Indicates whether the IG Script-encoded statement is included in the output by introducing an additional column following the Statement ID (or the Original Statement if activated). Choices include the exclusion (no additional column), the inclusion for the first atomic statement only (i.e., first row following the header row), or the inclusion for all atomic statements (i.e., each row)." class="tooltip">Inclusion of IG Script-encoded statement in generated output:</span>
<select id="printIgScript" name="printIgScript" type="select">
    
    <option value="No inclusion of IG Script coding in output (i.e., no additional column)" selected="selected">No inclusion of IG Script coding in output (i.e., no additional column)</option>
    
    <option value="Include IG Script-encoded statement for first atomic statement only (i.e., in first row following optional header row)" >Include IG Script-encoded statement for first atomic statement only (i.e., in first row following optional header row)</option>
    
    <option value="Include IG Script-encoded statement for each atomic statement (i.e., in each row)" >Include IG Script-encoded statement for each atomic statement (i.e., in each row)</option>
    
</select>


<span data-text="The application currently supports two output types, either Google Sheets output, which can be directly copied into any Google sheet in your browser, or CSV format, which can be used for further processing in Excel or by scripts. Note that the CSV variant uses the pipe symbol (&#39;|&#39;) as delimiter/separator." class="tooltip">Output format:</span>
<select id="outputType" name="outputType" type="select">

<option value="Google Sheets" selected="selected">Google Sheets</option>

<option value="CSV format" >CSV format</option>

</select>

<button id="generate" class="submit" value="Generate tabular output" onclick="saveFormContent()" type="submit">Generate tabular output</button>
<script>
    

    const submitButton = document.getElementById("generate");

    submitButton.addEventListener("click", () => {
        submitButton.classList.add("button-loading");
    });
</script>




<p>Version: 0.5</p>

</form>
</div>

</body>

</html>